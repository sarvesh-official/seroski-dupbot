name: Quick Database Actions

on:
  workflow_dispatch:
    inputs:
      quick_action:
        description: 'Quick action to perform'
        required: true
        type: choice
        options:
        - 'populate-issues'
        - 'debug-status'
        - 'test-connection'

permissions:
  issues: read
  contents: read

jobs:
  quick-action:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Populate Issues (Safe)
        if: github.event.inputs.quick_action == 'populate-issues'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_INDEX: ${{ secrets.PINECONE_INDEX }}
        run: |
          echo "🚀 Populating existing issues to database..."
          echo "This operation is safe - it will skip existing issues."
          node scripts/populate-existing-issues.js

      - name: Debug Database Status
        if: github.event.inputs.quick_action == 'debug-status'
        env:
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_INDEX: ${{ secrets.PINECONE_INDEX }}
        run: |
          echo "🔍 Checking database status and contents..."
          node scripts/debug-pinecone.js

      - name: Test Database Connection
        if: github.event.inputs.quick_action == 'test-connection'
        env:
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_INDEX: ${{ secrets.PINECONE_INDEX }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🔗 Testing all connections..."
          echo "Testing Pinecone connection..."
          node -e "
          import { Pinecone } from '@pinecone-database/pinecone';
          const pinecone = new Pinecone({ apiKey: process.env.PINECONE_API_KEY });
          const index = pinecone.Index(process.env.PINECONE_INDEX);
          index.describeIndexStats().then(stats => {
            console.log('✅ Pinecone connected successfully');
            console.log('📊 Index stats:', JSON.stringify(stats, null, 2));
          }).catch(err => {
            console.error('❌ Pinecone connection failed:', err.message);
            process.exit(1);
          });
          "
          
          echo "Testing GitHub connection..."
          node -e "
          import { Octokit } from '@octokit/rest';
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          octokit.repos.get({ owner: '${{ github.repository_owner }}', repo: '${{ github.event.repository.name }}' }).then(result => {
            console.log('✅ GitHub connected successfully');
            console.log('📋 Repository:', result.data.full_name);
          }).catch(err => {
            console.error('❌ GitHub connection failed:', err.message);
            process.exit(1);
          });
          "
          
          echo "Testing Gemini API..."
          node -e "
          import fetch from 'node-fetch';
          const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/text-embedding-004:embedContent?key=' + process.env.GEMINI_API_KEY, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              model: 'models/text-embedding-004',
              content: { parts: [{ text: 'test connection' }] }
            })
          });
          if (response.ok) {
            console.log('✅ Gemini API connected successfully');
          } else {
            console.error('❌ Gemini API connection failed:', response.status, response.statusText);
            process.exit(1);
          }
          "

      - name: Action Summary
        if: always()
        run: |
          echo "### 🎯 Quick Action Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** ${{ github.event.inputs.quick_action }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY